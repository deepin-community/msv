<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="Tahiti.xsl" ?>
<article>
<articleinfo>
	<releaseinfo>$Id: RELAX NG Bind.docbook 935 2001-07-21 02:41:41Z Bear $</releaseinfo>
	<title>Tahiti User's Guide for RELAX NG</title>
	<editor>
		<surname>KAWAGUCHI</surname>
		<firstname>Kohsuke</firstname>
		<affiliation>
			<address>
				<email>kohsuke.kawaguchi@eng.sun.com</email>
			</address>
		</affiliation>
	</editor>
	<copyright>
		<year>2001</year>
		<holder>Sun Microsystems</holder>
	</copyright>
	<legalnotice>
		<para>
			Sun internal use only.
		</para>
	</legalnotice>
	<abstract>
		<para>
			This document describes how to use Tahiti with RELAX NG.
		</para>
	</abstract>
</articleinfo>
<section>
	<title>Control the compiler</title>
	
	<para>
		Although the compiler takes every effort to extract a meaningful mapping from the schema,
		but often it is not wise enough.
		
		By annotating schema files, you can control the way
		the compiler maps schemas to Java classes.
	</para><para>
		Tahiti defines a set of global attributes to annotate RELAX NG schema, just like XLink does.
		All the attributes are placed in the <quote>http://www.sun.com/xml/tahiti/</quote>
		namespace.
	</para><para>
		Tahiti defines only three attributes.
	</para>
	<table frame="all">
		<title>Tahiti annotation attributes</title>
		<tgroup cols="3" align="center" colsep="1" rowsep="1">
			<thead>
				<row>
					<entry>Name</entry>
					<entry>Type</entry>
					<entry>Meaning</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>role</entry>
					<entry>class/interface/field/superClass/none/ignore</entry>
					<entry>
						it controls how a RELAX NG pattern will be mapped to a Java item.
					</entry>
				</row>
				<row>
					<entry>name</entry>
					<entry>Java identifier name</entry>
					<entry>
						it provides a hint to the compiler about the identifier it should use.
						(e.g., class name, field name, etc.)
					</entry>
				</row>
				<row>
					<entry>package</entry>
					<entry>Java package name</entry>
					<entry>
						It specified the package name in which the generated classes will reside.
						This field should be something like "org.example.foo".
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<para>
		The following sections will guide you through each attributes and how you can use them
		to obtain what you want.
	</para>
</section>

<section>
	<title>The role attribute</title>
	
	<para>
		The role attribute is the most important annotation. It controls how RELAX NG grammar
		should be mapped to a Java item.
	</para><para>
		The value of the role attribute can be one of "class","interface","field","superClass","none",
		and "ignore".
	</para>
	
	<section>
		<title>"none" - Suppress unnecessary classes</title>
		
		<para>
			<userinput>role="none"</userinput> is an instruction to the compiler
			not to generate a class for the particular pattern.
			Since the compiler usually maps &lt;element&gt; patterns to Java classes,
			<userinput>role="none"</userinput> is usually used on &lt;element> patterns.
		</para>
		<para>
			Sometimes the compiler generates Java classes that look unnecessary.
			Consider the following grammar:
		</para>
<programlisting><![CDATA[
<element name="header">
  <interleave>
    <element name="meta"><text/></element>
    <optional>
      <element name="info" ]]><emphasis>t:role="none"</emphasis><![CDATA[>
        <element name="author"><text/></element>
        <element name="version"><text/></element>
      </element>
    </optional>
  </interleave>
</element>]]></programlisting>
		<para>
			Without the role attribute,
			The compiler will generate one Java class for the "info" element, and another one
			for the "header" element.
			By specifying the role attribute as none, the compiler will suppress a Java class
			for the "info" element. As a result, the Header class will have the author field
			and the version field.
		</para>
	</section>
	
	<section>
		<title>"ignore" - Ignore a part of the document</title>
		
		<para>
			<userinput>role="ignore"</userinput> is an instruction to the compiler to
			ignore the specified part of the grammar. 
		</para><para>
			Many vocabularies (e.g., RELAX NG, W3C XML Schema) allows their
			instances to be annotated by attributes from other namespaces.
			Many grammars also provides a place holder element inside which
			elements from other namespaces can appear (e.g., &lt;appInfo&gt;
			tag of W3C XML Schema).
		</para><para>
			For example, RELAX NG schema for RELAX NG has the following definition,
			which allows any element of RELAX NG to have attributes from other namespaces.
		</para>
<programlisting><![CDATA[
<define name="common-atts">
  ....
  <zeroOrMore ]]><emphasis>t:role="ignore"</emphasis><![CDATA[>
    <attribute>
      <not>
        <choice>
          <nsName/>
          <nsName ns=""/>
        </choice>
      </not>
    </attribute>
  </zeroOrMore>
</define>
]]></programlisting>
		<para>
			Without the role attribute, the compiler will create a class to capture each attribute from
			foreign namespaces. But chances are, you don't care about those attributes.
		</para><para>
			With the role attribute as "ignore" on the zeroOrMore pattern, the generated
			Java object model will ignore the entire descendants of that pattern. In this case,
			this means that the all attributes from foreign namespaces are ignored.
		</para>
		
		<para>
			The effect of <userinput>role="ignore"</userinput> is not affected by the &lt;ref>
			pattern. The following example will result in the object model that only cares
			about the contents of the head tag (and ignores the entire contents of the body tag.)
		</para>
<programlisting><![CDATA[
<element name="html">
  <optional>
    <ref name="head"/>
  </optional>
  <choice ]]><emphasis>t:role="ignore"</emphasis><![CDATA[>
    <ref name="frameset"/>
    <ref name="body"/>
  </choice>
</element>
]]></programlisting>
	</section>
	
	
	<section>
		<title>"class" - Specifies a Java class</title>
		
		<para>
			Sometimes, you want the compiler to map a certain pattern to a Java class.
			<userinput>role="class"</userinput> is an instruction to the compiler to
			generate a class for a particular pattern.
		</para><para>
			Consider the following example:
		</para>
<programlisting><![CDATA[
<attribute name="distanceList">
  <list>
    <zeroOrMore>
      <group ]]><emphasis>t:role="class" t:name="Length"</emphasis><![CDATA[>
        <data type="integer"/>
        <choice><!-- unit -->
          <value>mm</value>
          <value>m</value>
          <value>km</value>
        </choice>
      </group>
    </zeroOrMore>
  </list>
</attribute>
]]></programlisting>
		<para>
			The <userinput>role</userinput> attribute forces the compiler to create a Java
			class, whose name "Length" is also specified by the name attribute.
			The Length class will have two fields; one for the integer value and
			another for the unit.
		</para><para>
			Note that in the above example, an otherwise unnecessary &lt;group> pattern
			is added so that the Tahiti attributes can creep in. If we specify the role attribute
			on the zeroOrMore pattern, then the class will be generated for the entire list of
			distances, not for one distance.
		</para><para>
			As done in the above example, sometimes you may want to modify a schema
			a bit so that you can annotate it in the way you want.
		</para>
	</section>
	
	
	<section>
		<title>"field" - Specifies a field</title>
		
		<para>
			<userinput>role="field"</userinput> is an instruction to the compiler
			to create a field and accomodate child objects into that field.
		</para><para>
			The primary use case of this instruction is to change the way fields
			are created. Consider the following example:
		</para>
<programlisting><![CDATA[
<element name="grammar">
  <zeroOrMore>
    <choice>
      <ref name="start-element"/>
      <ref name="define-element"/>
      <ref name="include-element"/>
    </choice>
  </zeroOrMore>
</element>
]]></programlisting>
		<para>
			This is a (slightly modified) fragment of the RELAX NG schema for RELAX NG.
			Let's assume that the compiler will generate four classes. The Grammar class
			for the grammar element, the Start class for the start element, the Define class
			for the define element, and finally the Include class for the include element.
		</para><para>
			Since the content model of the grammar element is zero-or-more-ed choice of
			three elements, the compiler will generate one field for the Grammar class to store all three kinds of
			objects created for child elements.
		</para><para>
			But in this case, you may want to have three fields: one for the Include class,
			one for the Define class, and one for the Start class. To do this, use
			<userinput>role="field"</userinput> as follows:
		</para>
<programlisting><![CDATA[
<element name="grammar">
  <zeroOrMore>
    <choice>
      <ref name="start-element" ]]><emphasis>t:role="field" t:name="starts"</emphasis><![CDATA[/>
      <ref name="define-element" ]]><emphasis>t:role="field" t:name="defines"</emphasis><![CDATA[/>
      <ref name="include-element" ]]><emphasis>t:role="field" t:name="includes"</emphasis><![CDATA[/>
    </choice>
  </zeroOrMore>
</element>
]]></programlisting>
		<para>
			In this way, three fields ("starts","defines", and "includes") are created for each child classes.
			The starts field will receive objects of the Start class, so on, so forth.
		</para><para>
			You can specify the same name for multiple <userinput>role="field"</userinput> declaration.
			In RELAX NG, the start pattern and the define pattern is very similar. The following annotation
			will generate two fields for the Grammar class.
		</para>
<programlisting><![CDATA[
<element name="grammar">
  <zeroOrMore>
    <choice>
      <ref name="start-element" ]]><emphasis>t:role="field" t:name="defines"</emphasis><![CDATA[/>
      <ref name="define-element" ]]><emphasis>t:role="field" t:name="defines"</emphasis><![CDATA[/>
      <ref name="include-element" t:role="field" t:name="includes"/>
    </choice>
  </zeroOrMore>
</element>
]]></programlisting>
		<para>
			Now the defines field will receive instances of both the Define class and the Start class.
		</para>
		<para>
			Take the opposite example. If you want to ensure that all three child classes are stored
			into one field, then you can place the instruction to the choice pattern or the zeroOrMore pattern.
		</para>
<programlisting><![CDATA[
<element name="grammar">
  <zeroOrMore ]]><emphasis>t:role="field" t:name="declarations"</emphasis><![CDATA[>
    <choice>
      <ref name="start-element" />
      <ref name="define-element" />
      <ref name="include-element" />
    </choice>
  </zeroOrMore>
</element>
]]></programlisting>
		<para>
			It doesn't matter where you place the <userinput>role="field"</userinput> instruction, as long as 
			it is placed between the parent class and the child class.
		</para>
	</section>
	
	
	<section>
		<title>"interface" - Specifies an interface</title>
		
		<para>
			<userinput>role="interface"</userinput> is an instruction to the compiler to generate
			an interface and have designated classes implement that interface.
		</para><para>
			This is usually used in the choice pattern. Consider the following example:
		</para>
<programlisting><![CDATA[
<define name="inlineItem">
  <choice ]]><emphasis>t:role="interface"</emphasis><![CDATA[>
    <element name="bold"> ... </element>
    <element name="span"> ... </element>
    <element name="font"> ... </element>
  </choice>
</define>
<define name="foo">
  <element name="foo">
    <ref name="inlineItem"/>
  </element>
</define>
]]></programlisting>
		<para>
			By this instruction, the compiler will generate the InlineItem interface. This interface is
			then implemented by the Bold class, the Span class, and the Font class.
		</para><para>
			As a result of this, the Foo class will get the following signature:
		</para>
<programlisting><![CDATA[
class Foo {
  InlineItem value;
}
]]></programlisting>
		<para>
			Once <userinput>role="interface"</userinput> is specified, then this interface will be
			used throughout in the grammar. If there is a bar element like this:
		</para>
<programlisting><![CDATA[
<element name="bar">
  <choice>
    <element name="span"> ... </element>
    <element name="font"> ... </element>
  </choice>
</element>
]]></programlisting>
		<para>
			Then the corresponding Bar class will also get the field of the InlineItem type.
		</para>
		<para>
			<userinput>role="interface"</userinput> can be nested to create a hierarchy of interfaces.
		</para>
<programlisting><![CDATA[
<define name="inlineItem">
  <choice ]]><emphasis>t:role="interface"</emphasis><![CDATA[>
    <element name="bold"> ... </element>
    <element name="span"> ... </element>
  </choice>
</define>

<define name="blockItem">
  <choice ]]><emphasis>t:role="interface"</emphasis><![CDATA[>
    <element name="table"> ... </element>
    <element name="list"> ... </element>
  </choice>
</define>

<define name="contentItem">
  <choice ]]><emphasis>t:role="interface"</emphasis><![CDATA[>
    <ref name="inlineItem"/>
    <ref name="blockItem"/>
  </choice>
</define>
]]></programlisting>
		<para>
			In this way, you'll get the following type hierarchy.
		</para>
<programlisting><![CDATA[
interface ContentItem {}
interface InlineItem extends ContentItem {}
interface BlockItem extends ContentItem {}

class Bold implements InlineItem {}
class Span implements InlineItem {}
class Table implements BlockItem {}
class List implements BlockItem {}
]]></programlisting>
	</section>
	
	
	
	<section>
		<title>"superClass" - Designates the super class</title>
		
		<para>
			Tahiti allows you to specify the implementation inheritance by using <userinput>role="superClass"</userinput>.
			Since the extraction of this information is very difficult, the compiler will never
			attempt to automatically detect the implementation inheritance relationships.
		</para><para>
			To designate the super class, place the <userinput>role="superClass"</userinput> instruction between
			the derived class and the base class like this:
		</para>
<programlisting><![CDATA[
<define name="expression">
  <choice>
    <element name="add">
      <ref name="binaryOperator" ]]><emphasis>t:role="superClass"</emphasis><![CDATA[/>
    </element>
    <element name="sub">
      <ref name="binaryOperator" ]]><emphasis>t:role="superClass"</emphasis><![CDATA[/>
    </element>
  </choice>
</define>

<define name="binaryOperator" ]]><emphasis>t:role="class"</emphasis><![CDATA[/>
  <ref name="expression"/>
  <ref name="expression"/>
</define>
]]></programlisting>
		<para>
			The compiler will automatically generate the Add class and the Sub class.
			And since their content model has the <userinput>role="superClass"</userinput> instruction,
			the designated BinaryOperator class will be used as the super class of these two classes.
		</para><para>
			The following pattern will achieve the same result:
		</para>
<programlisting><![CDATA[
<define name="expression">
  <choice>
    <element name="add">
      <ref name="binaryOperator" />
    </element>
    <element name="sub">
      <ref name="binaryOperator" />
    </element>
  </choice>
</define>

<define name="binaryOperator" ]]><emphasis>t:role="superClass"</emphasis><![CDATA[/>
  <group ]]><emphasis>t:role="class"</emphasis><![CDATA[/>
    <ref name="expression"/>
    <ref name="expression"/>
  </group>
</define>
]]></programlisting>
		<para>
			As you see, there is no restriction about the place you can put
			the <userinput>role="superClass"</userinput> instruction as long as
			it is between the derived class and the base class.
		</para>
		<para>
			However, there is one important restriction about the use of this instruction.
			Intuitively, the derived class must always have one and only one instance of the base class.
			Consider the following example:
		</para>
<programlisting><![CDATA[
<element name="add">
  <zeroOrMore ]]><emphasis>t:role="superClass"</emphasis><![CDATA[>
    <ref name="binaryOperator" />
  </zeroOrMore>
</element>

<define name="binaryOperator">
  <group ]]><emphasis>t:role="class"</emphasis><![CDATA[>
    <ref name="expression"/>
    <ref name="expression"/>
  </group>
</define>
]]></programlisting>
		<para>
			In this example, the Add class can contain more than one instance of the BinaryOperator classes.
			Apparently, this doesn' match with the fact that the BinaryOperator class is the base class of the
			Add class. The use of the <userinput>role="superClass"</userinput> instruction in this way is prohibited.
		</para>
	</section>
</section>


<section>
	<title>The name attribute</title>
	
	<para>
		The name attribute is a supplementary instruction that gives the compiler the information about the name of 
		classes, interfaces, and fields.
	</para><para>
		As you have seen in the explanation of the role attribute, the name attribute is usually coupled with
		the role attribute. But actually, the name attribute can be used by itself to specify the name for
		classes and fields automatically generated by the compiler.
	</para><para>
		Let's consider the following example.
	</para>
<programlisting><![CDATA[
<zeroOrMore>
  <element>
    <anyName/>
    <attribute name="firstName" />
    <attribute name="lastName" />
  </element>
</zeroOrMore>
]]></programlisting>
	
	<para>
		The compiler will find that this element should be mapped to a Java class.
		Usually, this generated class will be named after the name of element/attribute names or
		the nearest name specified for &lt;define>. But in this particular case, there is no such hint.
	</para><para>
		To help the compiler, you can specify the name attribute on the element pattern.
	</para>
	
<programlisting><![CDATA[
<zeroOrMore>
  <element ]]><emphasis>t:name="Name"</emphasis><![CDATA[>
    <anyName/>
    <attribute name="firstName" />
    <attribute name="lastName" />
  </element>
</zeroOrMore>
]]></programlisting>
	
	<para>
		In this way, the compiler will generate the Name class,
		which will have the firstName field and the lastName field.
	</para><para>
		Similarly, the name attribute can be also used to rename the field name. For example, if you
		want to have the given field and the family field, then you can do that by using 
		the name attribute.
	</para>
	
<programlisting><![CDATA[
<zeroOrMore>
  <element ]]><emphasis>t:name="Name"</emphasis><![CDATA[>
    <anyName/>
    <attribute name="firstName" ]]><emphasis>t:name="given"</emphasis><![CDATA[/>
    <attribute name="lastName" ]]><emphasis>t:name="family"</emphasis><![CDATA[/>
  </element>
</zeroOrMore>
]]></programlisting>
	
	<para>
		This technique is also useful to solve the name collision to Java reserved names.
	</para>
</section>




<section>
	<title>The package attribute</title>
	
	<para>
		The package attribute is used to specify the package name in which the generated classes will be placed.
		Usually, you want to place everything into one package. In that case, you should specify the package attribute
		to the document element like this:
	</para>
	
<programlisting><![CDATA[
<?xml version="1.0"?>
<grammar xmlns="http://relaxng.org/ns/structure/0.9" xmlns:t="http://www.sun.com/xml/tahiti/"
    ]]><emphasis>t:package="org.example.test"</emphasis><![CDATA[>
  
  ....
</grammar>
]]></programlisting>
	
	<para>
		All the classes generated from this grammar, including included grammars, will be placed into this package.
	</para>
	
	<para>
		Actually, the package attribute can be specified anywhere in the grammar, as in the following example.
		Once specified, it is effective on all descendants, unless a new package name is specified.
	</para>
<programlisting><![CDATA[
<?xml version="1.0"?>
<grammar xmlns="http://relaxng.org/ns/structure/0.9" xmlns:t="http://www.sun.com/xml/tahiti/"
    ]]><emphasis>t:package="org.example.test"</emphasis><![CDATA[>
  
  <start>
    <element name="root">
      <ref name="child"/>
    </element>
  </start>
  
  <define name="child" ]]><emphasis>t:package="org.example.test.foo"</emphasis><![CDATA[>
    <element name="sub1">
      <element name="sub2" ]]><emphasis>t:package="com.abcdef.bar"</emphasis><![CDATA[>
        <text/>
      </element>
    </element>
  </define>
</grammar>
]]></programlisting>
	
	<para>
		In the above example, the Root class will go to the "org.example.test" package,
		the Sub1 class will go to the "org.example.test.foo" package, and
		the Sub2 class will go to the "com.abcdef.bar" package.
	</para>
</section>
</article>
